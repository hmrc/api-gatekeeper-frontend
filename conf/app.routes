# microservice specific routes

->          /apicatalogue             apicataloguepublish.Routes


GET         /review                                                           controllers.ApplicationController.reviewPage(id: model.ApplicationId)

POST        /update-rate-limit-tier                                           controllers.ApplicationController.handleUpdateRateLimitTier(id: model.ApplicationId)

GET         /developer                                                        controllers.DevelopersController.developerPage(developerIdentifier: model.DeveloperIdentifier)
GET         /developer/delete                                                 controllers.DevelopersController.deleteDeveloperPage(developerIdentifier: model.DeveloperIdentifier)
POST        /developer/delete                                                 controllers.DevelopersController.deleteDeveloperAction(developerIdentifier: model.DeveloperIdentifier)
GET         /developer/mfa/remove                                             controllers.DevelopersController.removeMfaPage(developerIdentifier: model.DeveloperIdentifier)
POST        /developer/mfa/remove                                             controllers.DevelopersController.removeMfaAction(developerIdentifier: model.DeveloperIdentifier)

GET         /developers2                                                      controllers.Developers2Controller.blankDevelopersPage
POST        /developers2                                                      controllers.Developers2Controller.developersPage

GET         /applications                                                     controllers.ApplicationController.applicationsPage(environment: Option[String] ?= None)
GET         /applications/csv                                                 controllers.ApplicationController.applicationsPageCsv(environment: Option[String] ?= None)

GET         /applications/:id                                                 controllers.ApplicationController.applicationPage(id: model.ApplicationId)

POST        /applications/:id/handle-uplift                                   controllers.ApplicationController.handleUplift(id: model.ApplicationId)
GET         /applications/:id/resend-verification                             controllers.ApplicationController.resendVerification(id: model.ApplicationId)

GET         /applications/:id/access/scopes                                   controllers.ApplicationController.manageScopes(id: model.ApplicationId)
POST        /applications/:id/access/scopes                                   controllers.ApplicationController.updateScopes(id: model.ApplicationId)

GET         /applications/:id/ip-allowlist                                    controllers.ApplicationController.viewIpAllowlistPage(id: model.ApplicationId)
GET         /applications/:id/ip-allowlist/manage                             controllers.ApplicationController.manageIpAllowlistPage(id: model.ApplicationId)
POST        /applications/:id/ip-allowlist/manage                             controllers.ApplicationController.manageIpAllowlistAction(id: model.ApplicationId)

GET         /applications/:id/access/overrides                                controllers.ApplicationController.manageAccessOverrides(id: model.ApplicationId)
POST        /applications/:id/access/overrides                                controllers.ApplicationController.updateAccessOverrides(id: model.ApplicationId)

GET         /applications/:id/subscriptions                                   controllers.SubscriptionController.manageSubscription(id: model.ApplicationId)
POST        /applications/:id/subscriptions/subscribe                         controllers.SubscriptionController.subscribeToApi(id: model.ApplicationId, context: model.ApiContext, version: model.ApiVersion)
POST        /applications/:id/subscriptions/unsubscribe                       controllers.SubscriptionController.unsubscribeFromApi(id: model.ApplicationId, context: model.ApiContext, version: model.ApiVersion)

GET         /applications/:id/subscriptions-configuration                     controllers.SubscriptionConfigurationController.listConfigurations(id: model.ApplicationId)
GET         /applications/:id/subscriptions-configuration/:context/:version   controllers.SubscriptionConfigurationController.editConfigurations(id: model.ApplicationId, context: model.ApiContext, version: model.ApiVersion)
POST        /applications/:id/subscriptions-configuration/:context/:version   controllers.SubscriptionConfigurationController.saveConfigurations(id: model.ApplicationId, context: model.ApiContext, version: model.ApiVersion)

GET         /applications/:id/name                                            controllers.UpdateApplicationNameController.updateApplicationNamePage(id: model.ApplicationId)
POST        /applications/:id/name                                            controllers.UpdateApplicationNameController.updateApplicationNameAction(id: model.ApplicationId)
GET         /applications/:id/name/admin-email                                controllers.UpdateApplicationNameController.updateApplicationNameAdminEmailPage(id: model.ApplicationId)
POST        /applications/:id/name/admin-email                                controllers.UpdateApplicationNameController.updateApplicationNameAdminEmailAction(id: model.ApplicationId)
GET         /applications/:id/name/updated                                    controllers.UpdateApplicationNameController.updateApplicationNameSuccessPage(id: model.ApplicationId)

GET         /applications/:id/rate-limit                                      controllers.ApplicationController.manageRateLimitTier(id: model.ApplicationId)
POST        /applications/:id/rate-limit                                      controllers.ApplicationController.updateRateLimitTier(id: model.ApplicationId)

GET         /applications/:id/grant-length                                      controllers.ApplicationController.manageGrantLength(id: model.ApplicationId)
POST        /applications/:id/grant-length                                      controllers.ApplicationController.updateGrantLength(id: model.ApplicationId)

GET         /applications/:id/team-members                                    controllers.TeamMembersController.manageTeamMembers(id: model.ApplicationId)
GET         /applications/:id/team-members/add                                controllers.TeamMembersController.addTeamMember(id: model.ApplicationId)
POST        /applications/:id/team-members/add                                controllers.TeamMembersController.addTeamMemberAction(id: model.ApplicationId)
POST        /applications/:id/team-members/remove-confirmation                controllers.TeamMembersController.removeTeamMember(id: model.ApplicationId)
POST        /applications/:id/team-members/remove                             controllers.TeamMembersController.removeTeamMemberAction(id: model.ApplicationId)

->          /template                                                         template.Routes

GET         /assets/*file                                                     controllers.Assets.versioned(path="/public", file: Asset)

GET         /nav-links                                                        controllers.NavigationController.navLinks
GET         /xml-organisations                                                controllers.XmlServicesController.organisationsSearchPage

GET         /applications/:id/delete                                          controllers.ApplicationController.deleteApplicationPage(id: model.ApplicationId)
POST        /applications/:id/delete                                          controllers.ApplicationController.deleteApplicationAction(id: model.ApplicationId)

GET         /applications/:id/block                                           controllers.ApplicationController.blockApplicationPage(id: model.ApplicationId)
POST        /applications/:id/block                                           controllers.ApplicationController.blockApplicationAction(id: model.ApplicationId)

GET         /applications/:id/unblock                                         controllers.ApplicationController.unblockApplicationPage(id: model.ApplicationId)
POST        /applications/:id/unblock                                         controllers.ApplicationController.unblockApplicationAction(id: model.ApplicationId)

GET         /application/add                                                  controllers.ApplicationController.createPrivOrROPCApplicationPage
POST        /application/add                                                  controllers.ApplicationController.createPrivOrROPCApplicationAction

GET         /pending                                                          controllers.DeploymentApprovalController.pendingPage
GET         /pending/:serviceName/review-sandbox                              controllers.DeploymentApprovalController.reviewPage(serviceName: String, environment: String = "SANDBOX")
GET         /pending/:serviceName/review-production                           controllers.DeploymentApprovalController.reviewPage(serviceName: String, environment: String = "PRODUCTION")
POST        /pending/:serviceName/approve-sandbox                             controllers.DeploymentApprovalController.handleApproval(serviceName: String, environment: String = "SANDBOX")
POST        /pending/:serviceName/approve-productio                           controllers.DeploymentApprovalController.handleApproval(serviceName: String, environment: String = "PRODUCTION")

GET         /apis                                                             controllers.ApiDefinitionController.apis

GET         /subscriptionFieldValues                                          controllers.SubscriptionFieldsController.subscriptionFieldValues

GET         /emails                                                           controllers.EmailsController.landing()
POST        /emails                                                           controllers.EmailsController.chooseEmailOption()

GET         /emails/:emailChoice/information                                   controllers.EmailsController.showEmailInformation(emailChoice: String)

GET         /emails/all-users                                                   controllers.EmailsController.emailAllUsersPage()
GET         /emails/api-subscribers                                             controllers.EmailsController.emailApiSubscribersPage(apiVersionFilter: Option[String])

GET         /emails/email-preferences                                           controllers.EmailsController.emailPreferencesChoice()
POST        /emails/email-preferences                                           controllers.EmailsController.chooseEmailPreferences()
GET         /emails/email-preferences/by-topic                                  controllers.EmailsController.emailPreferencesTopic(selectedTopic: Option[String])
GET         /emails/email-preferences/by-api-category                           controllers.EmailsController.emailPreferencesAPICategory(selectedTopic: Option[String], selectedCategory:Option[String])
GET         /emails/email-preferences/select-api                                controllers.EmailsController.selectSpecficApi(selectedAPIs: Option[List[String]])
GET         /emails/email-preferences/by-specific-api                           controllers.EmailsController.emailPreferencesSpecificApis(selectedAPIs: List[String], selectedTopic: Option[String])

GET         /boxes/csv                                                              controllers.BoxesController.getAll()
